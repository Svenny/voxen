#version 460 core

#extension GL_EXT_scalar_block_layout : require

#include <util/aabb.glsl>
#include <util/vk_structs.glsl>

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform CameraParameters {
	mat4 translated_world_to_clip;
	vec3 world_position; float _pad0;
} g_uboCameraParams;

layout(set = 1, binding = 0, std430) buffer BaseScaleSsbo {
	vec4 value[];
} g_ssboBaseScale;

layout(set = 1, binding = 1, scalar) writeonly buffer DrawCommandSsbo {
	VkDrawIndexedIndirectCommand value[];
} g_ssboDrawCommand;

layout(set = 1, binding = 2, scalar) readonly buffer AabbSsbo {
	Aabb value[];
} g_ssboAabb;

void main()
{
	vec4 base_scale = g_ssboBaseScale.value[gl_GlobalInvocationID.x];
	vec3 offset = base_scale.xyz;
	vec3 scale = base_scale.www;

	Aabb aabb = g_ssboAabb.value[gl_GlobalInvocationID.x];
	aabb.min = fma(aabb.min, scale, offset);
	aabb.max = fma(aabb.max, scale, offset);

	g_ssboDrawCommand.value[gl_GlobalInvocationID.x].instanceCount =
		isAabbInFrustum(aabb, g_uboCameraParams.translated_world_to_clip) ? 1u : 0u;
}
